"""
Validace a z√°kladn√≠ anal√Ωza vytvo≈ôen√© ƒçtvrti
Pomoc√≠ ofici√°ln√≠ honeybee-core knihovny
"""

import os
from honeybee.model import Model

def validate_model(hbjson_path):
    """
    Naƒçte a zvaliduje HBJSON model.
    
    Args:
        hbjson_path: Cesta k HBJSON souboru
        
    Returns:
        Model: Naƒçten√Ω model nebo None p≈ôi chybƒõ
    """
    if not os.path.exists(hbjson_path):
        print(f"Soubor neexistuje: {hbjson_path}")
        return None
    
    try:
        # Naƒçten√≠ modelu pomoc√≠ honeybee-core
        model = Model.from_hbjson(hbjson_path)
        print(f"‚úì Model √∫spƒõ≈°nƒõ naƒçten: {model.display_name}")
        return model
        
    except Exception as e:
        print(f"‚úó Chyba p≈ôi naƒç√≠t√°n√≠ modelu: {e}")
        return None

def analyze_model_geometry(model):
    """
    Analyzuje geometrii modelu.
    
    Args:
        model: Honeybee Model objekt
    """
    print(f"\n=== GEOMETRICK√Å ANAL√ùZA ===")
    
    total_floor_area = 0
    total_wall_area = 0
    total_roof_area = 0
    total_window_area = 0
    
    for room in model.rooms:
        for face in room.faces:
            area = face.area
            
            # Klasifikace podle typu plochy
            face_type = str(face.type)
            if 'Floor' in face_type:
                total_floor_area += area
            elif 'Wall' in face_type:
                total_wall_area += area
            elif 'RoofCeiling' in face_type:
                total_roof_area += area
            
            # Okna
            for aperture in face.apertures:
                total_window_area += aperture.area
    
    print(f"Celkov√° podlahov√° plocha: {total_floor_area:.1f} m¬≤")
    print(f"Celkov√° plocha stƒõn: {total_wall_area:.1f} m¬≤") 
    print(f"Celkov√° plocha st≈ôech: {total_roof_area:.1f} m¬≤")
    print(f"Celkov√° plocha oken: {total_window_area:.1f} m¬≤")
    
    # Pomƒõry
    if total_wall_area > 0:
        window_to_wall_ratio = total_window_area / total_wall_area * 100
        print(f"Pomƒõr oken ke stƒõn√°m: {window_to_wall_ratio:.1f}%")

def analyze_building_types(model):
    """
    Analyzuje typy budov v modelu.
    
    Args:
        model: Honeybee Model objekt
    """
    print(f"\n=== ANAL√ùZA TYP≈Æ BUDOV ===")
    
    building_stats = {}
    
    for room in model.rooms:
        if room.user_data and 'building_type' in room.user_data:
            btype = room.user_data['building_type']
            
            if btype not in building_stats:
                building_stats[btype] = {
                    'rooms': 0,
                    'floor_area': 0,
                    'volume': 0
                }
            
            building_stats[btype]['rooms'] += 1
            building_stats[btype]['floor_area'] += room.floor_area
            building_stats[btype]['volume'] += room.volume
    
    for btype, stats in building_stats.items():
        print(f"\n{btype.upper()}:")
        print(f"  Poƒçet m√≠stnost√≠: {stats['rooms']}")
        print(f"  Podlahov√° plocha: {stats['floor_area']:.1f} m¬≤")
        print(f"  Objem: {stats['volume']:.1f} m¬≥")

def find_solar_surfaces(model):
    """
    Najde plochy vhodn√© pro sol√°rn√≠ anal√Ωzu (st≈ôechy).
    
    Args:
        model: Honeybee Model objekt
        
    Returns:
        list: Seznam st≈ôe≈°n√≠ch ploch s dodateƒçn√Ωmi informacemi
    """
    roof_faces = []
    
    for room in model.rooms:
        # Jen m√≠stnosti s st≈ôechami (horn√≠ patra)
        if room.user_data and room.user_data.get('has_roof', False):
            roof_type = room.user_data.get('roof_type', 'unknown')
            building_type = room.user_data.get('building_type', 'unknown')
            
            for face in room.faces:
                if 'RoofCeiling' in str(face.type):
                    roof_faces.append({
                        'room': room.display_name,
                        'face': face.display_name,
                        'area': face.area,
                        'center': face.center,
                        'normal': face.normal,
                        'roof_type': roof_type,
                        'building_type': building_type
                    })
    
    return roof_faces

def print_solar_analysis_preview(model):
    """
    Vyp√≠≈°e n√°hled na sol√°rn√≠ potenci√°l s informacemi o typech st≈ôech.
    
    Args:
        model: Honeybee Model objekt
    """
    print(f"\n=== SOL√ÅRN√ç POTENCI√ÅL (N√ÅHLED) ===")
    
    roof_faces = find_solar_surfaces(model)
    
    if not roof_faces:
        print("≈Ω√°dn√© st≈ôe≈°n√≠ plochy nenalezeny!")
        return
    
    total_roof_area = sum(roof['area'] for roof in roof_faces)
    print(f"Poƒçet st≈ôe≈°n√≠ch ploch: {len(roof_faces)}")
    print(f"Celkov√° plocha st≈ôech: {total_roof_area:.1f} m¬≤")
    
    # Anal√Ωza podle typu st≈ôechy
    roof_type_stats = {}
    for roof in roof_faces:
        rtype = roof['roof_type']
        if rtype not in roof_type_stats:
            roof_type_stats[rtype] = {'count': 0, 'area': 0}
        roof_type_stats[rtype]['count'] += 1
        roof_type_stats[rtype]['area'] += roof['area']
    
    print(f"\nRozdƒõlen√≠ podle typu st≈ôechy:")
    solar_ratings = {
        'gable': '‚≠ê‚≠ê‚≠ê V√Ωborn√© (ji≈æn√≠ strana)',
        'shed': '‚≠ê‚≠ê‚≠ê V√Ωborn√© (orientace na jih)',  
        'flat': '‚≠ê‚≠ê Dobr√© (nastaviteln√Ω sklon)',
        'hip': '‚≠ê St≈ôedn√≠ (men≈°√≠ plochy)'
    }
    
    for rtype, stats in roof_type_stats.items():
        rating = solar_ratings.get(rtype, '‚ùì Nezn√°m√©')
        print(f"  {rtype}: {stats['count']} ploch, {stats['area']:.1f} m¬≤ - {rating}")
    
    print(f"\nTop 3 nejvƒõt≈°√≠ st≈ôechy:")
    sorted_roofs = sorted(roof_faces, key=lambda x: x['area'], reverse=True)
    
    for i, roof in enumerate(sorted_roofs[:3], 1):
        rating = solar_ratings.get(roof['roof_type'], '‚ùì')
        print(f"  {i}. {roof['face']}: {roof['area']:.1f} m¬≤ ({roof['roof_type']}) - {rating}")
    
    # Odhad sol√°rn√≠ho potenci√°lu
    estimated_panels = total_roof_area * 0.7 / 2.0  # 70% pokryt√≠, 2m¬≤ na panel
    estimated_power = estimated_panels * 0.4  # 400W na panel
    estimated_annual = estimated_power * 1000  # kWh/rok (p≈ôibli≈ænƒõ)
    
    print(f"\nüìä ODHAD SOL√ÅRN√çHO POTENCI√ÅLU:")
    print(f"Odhadovan√Ω poƒçet panel≈Ø: {estimated_panels:.0f}")
    print(f"Odhadovan√Ω v√Ωkon: {estimated_power:.1f} kWp") 
    print(f"Odhadovan√° roƒçn√≠ v√Ωroba: {estimated_annual:.0f} kWh/rok")

def main():
    """
    Hlavn√≠ funkce pro validaci ƒçtvrti.
    """
    print("=== VALIDACE OSTRAVSK√â ƒåTVRTI ===")
    
    # Hled√°n√≠ HBJSON souboru
    hbjson_paths = [
        'output/ostrava_small_district.hbjson',
        'ostrava_small_district.hbjson'
    ]
    
    model = None
    for path in hbjson_paths:
        if os.path.exists(path):
            model = validate_model(path)
            break
    
    if not model:
        print("\n‚ö†Ô∏è  ≈Ω√°dn√Ω HBJSON soubor nenalezen!")
        print("Nejprve spus≈•te: python create_small_district.py")
        return
    
    # Detailn√≠ anal√Ωzy
    analyze_model_geometry(model)
    analyze_building_types(model)
    print_solar_analysis_preview(model)
    
    print(f"\n‚úÖ Model je p≈ôipraven pro experimenty s Ladybug Tools!")
    print(f"‚úÖ Obsahuje r≈Øzn√© typy st≈ôech ide√°ln√≠ pro sol√°rn√≠ simulace")
    print(f"‚úÖ M≈Ø≈æete pou≈æ√≠t tento model pro anal√Ωzu spot≈ôeby energie")
    print(f"‚úÖ Model obsahuje {len(model.rooms)} m√≠stnost√≠ ve 4 budov√°ch")
    print(f"‚úÖ St≈ôechy: gable, flat, hip, shed s r≈Øzn√Ωmi sklony a orientacemi")

if __name__ == "__main__":
    main()